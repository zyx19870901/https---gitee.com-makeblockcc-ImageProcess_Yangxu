#define PI 3.141592
#define STB_IMAGE_IMPLEMENTATION  
#define STB_IMAGE_WRITE_IMPLEMENTATION
#include "Process.h"

static int _lens[3000] = {
	316, 409, 338, 399, 361, 388, 385, 378, 410, 366, 437, 354, 466, 342, 496, 331, 526, 321, 561, 308, 595, 299, 633, 286, 671, 276, 712, 265, 754, 255, 797, 245, 843, 235, 890, 228, 939, 218, 989, 212, 1043, 206, 1095, 202, 1149, 198, 1204, 196, 1259, 196, 1313, 196, 1368, 197, 1423, 199, 1477, 202, 1530, 207, 1582, 213, 1633, 220, 1682, 229, 1729, 238, 1775, 247, 1819, 257, 1861, 267, 1901, 277, 1941, 288, 1978, 300, 2013, 311, 2047, 322, 2079, 334, 2108, 346, 2138, 357, 2164, 369, 2190, 380, 2214, 390, 2238, 402, 2260, 412, 
	306, 443, 327, 434, 350, 423, 374, 412, 399, 401, 426, 390, 454, 379, 484, 368, 515, 358, 549, 346, 586, 333, 622, 325, 660, 313, 701, 303, 744, 293, 788, 285, 834, 274, 883, 265, 932, 256, 981, 249, 1037, 243, 1090, 240, 1146, 236, 1201, 235, 1258, 234, 1314, 234, 1370, 235, 1426, 238, 1481, 241, 1535, 246, 1588, 252, 1639, 259, 1689, 267, 1738, 276, 1784, 285, 1829, 295, 1871, 305, 1913, 317, 1952, 326, 1989, 337, 2024, 348, 2057, 359, 2089, 371, 2119, 382, 2148, 393, 2175, 404, 2201, 415, 2225, 426, 2248, 436, 2270, 446, 
	295, 478, 317, 469, 340, 459, 363, 449, 388, 438, 415, 428, 443, 417, 473, 408, 505, 395, 538, 385, 574, 374, 610, 364, 649, 353, 691, 343, 734, 333, 778, 324, 826, 315, 874, 307, 925, 298, 976, 291, 1031, 285, 1086, 281, 1142, 277, 1199, 276, 1257, 274, 1314, 275, 1371, 276, 1428, 279, 1485, 282, 1539, 287, 1594, 293, 1646, 301, 1697, 308, 1746, 317, 1793, 325, 1839, 335, 1881, 345, 1923, 355, 1962, 366, 2000, 377, 2034, 387, 2068, 399, 2100, 409, 2130, 420, 2158, 430, 2186, 441, 2211, 451, 2236, 462, 2257, 472, 2280, 482, 
	286, 515, 307, 506, 330, 496, 353, 487, 378, 477, 405, 467, 433, 456, 462, 447, 494, 436, 528, 426, 563, 415, 599, 406, 638, 394, 681, 383, 724, 375, 769, 367, 817, 357, 866, 350, 917, 341, 970, 335, 1025, 328, 1082, 325, 1139, 321, 1197, 319, 1256, 317, 1314, 318, 1373, 319, 1431, 322, 1488, 326, 1545, 331, 1600, 336, 1653, 343, 1705, 350, 1754, 359, 1802, 367, 1848, 377, 1891, 386, 1933, 397, 1972, 406, 2010, 418, 2045, 427, 2079, 438, 2111, 448, 2141, 459, 2169, 469, 2196, 479, 2221, 489, 2245, 499, 2267, 508, 2289, 518, 
	277, 552, 298, 544, 320, 534, 344, 526, 369, 516, 395, 508, 423, 497, 452, 488, 484, 478, 517, 468, 552, 458, 589, 449, 628, 438, 670, 429, 714, 420, 760, 412, 808, 403, 859, 395, 910, 388, 964, 382, 1020, 375, 1077, 371, 1135, 367, 1195, 366, 1255, 364, 1315, 365, 1374, 366, 1434, 369, 1493, 372, 1550, 376, 1606, 382, 1660, 389, 1712, 396, 1762, 405, 1811, 412, 1857, 422, 1900, 430, 1942, 441, 1982, 450, 2020, 460, 2055, 470, 2089, 480, 2120, 489, 2150, 500, 2178, 509, 2205, 519, 2231, 527, 2255, 538, 2276, 545, 2298, 555, 
	268, 590, 289, 583, 311, 575, 335, 567, 359, 557, 385, 549, 413, 540, 442, 531, 474, 522, 507, 513, 542, 503, 579, 494, 618, 484, 660, 475, 704, 466, 751, 459, 800, 450, 851, 444, 903, 436, 958, 431, 1015, 424, 1073, 421, 1132, 416, 1193, 415, 1254, 413, 1315, 414, 1376, 415, 1437, 418, 1496, 421, 1554, 426, 1611, 431, 1667, 438, 1719, 444, 1770, 452, 1819, 460, 1866, 469, 1910, 477, 1952, 486, 1992, 495, 2029, 505, 2066, 513, 2099, 524, 2130, 530, 2159, 542, 2187, 550, 2214, 559, 2239, 567, 2262, 576, 2285, 584, 2306, 593, 
	261, 630, 282, 622, 303, 615, 326, 608, 351, 599, 377, 592, 404, 583, 434, 576, 465, 566, 498, 558, 534, 548, 570, 541, 610, 532, 652, 524, 696, 515, 742, 508, 792, 500, 843, 494, 897, 487, 952, 482, 1010, 476, 1069, 472, 1129, 468, 1191, 467, 1253, 465, 1315, 466, 1377, 467, 1439, 470, 1500, 472, 1559, 477, 1616, 481, 1673, 488, 1726, 494, 1778, 502, 1827, 509, 1874, 517, 1918, 524, 1960, 534, 2000, 542, 2038, 551, 2073, 559, 2107, 568, 2138, 576, 2168, 585, 2196, 593, 2222, 601, 2248, 608, 2271, 617, 2293, 623, 2314, 631, 
	254, 669, 273, 664, 296, 658, 319, 651, 343, 643, 370, 637, 397, 628, 426, 621, 457, 613, 490, 606, 525, 597, 562, 590, 602, 581, 644, 574, 688, 566, 735, 560, 785, 552, 837, 546, 891, 540, 947, 535, 1005, 530, 1065, 527, 1126, 523, 1189, 522, 1253, 520, 1316, 521, 1379, 521, 1442, 524, 1503, 526, 1563, 531, 1622, 535, 1678, 541, 1733, 546, 1786, 555, 1834, 559, 1882, 568, 1926, 574, 1968, 583, 2008, 590, 2046, 598, 2081, 605, 2115, 614, 2146, 621, 2176, 629, 2203, 636, 2230, 643, 2254, 650, 2278, 658, 2299, 664, 2320, 671, 
	247, 710, 268, 706, 289, 700, 312, 694, 336, 687, 362, 681, 389, 673, 418, 667, 449, 661, 482, 654, 517, 646, 554, 640, 594, 632, 637, 627, 681, 619, 728, 614, 778, 606, 830, 602, 885, 595, 941, 592, 1001, 586, 1062, 584, 1124, 580, 1188, 579, 1252, 577, 1316, 579, 1380, 579, 1444, 582, 1506, 583, 1567, 588, 1626, 591, 1684, 597, 1739, 601, 1791, 608, 1841, 613, 1888, 619, 1933, 625, 1976, 634, 2016, 640, 2054, 648, 2089, 654, 2122, 661, 2154, 668, 2183, 675, 2211, 681, 2236, 687, 2259, 692, 2284, 700, 2306, 705, 2326, 713, 
	242, 752, 262, 748, 284, 742, 306, 738, 330, 731, 356, 727, 383, 721, 412, 716, 442, 709, 476, 704, 510, 697, 548, 692, 587, 685, 630, 680, 674, 674, 722, 669, 772, 663, 825, 659, 880, 653, 937, 650, 998, 645, 1059, 643, 1122, 640, 1186, 640, 1252, 638, 1316, 639, 1382, 640, 1446, 641, 1509, 643, 1571, 647, 1630, 650, 1689, 654, 1744, 658, 1796, 664, 1847, 668, 1895, 675, 1940, 680, 1982, 687, 2022, 692, 2060, 698, 2095, 703, 2129, 710, 2160, 715, 2189, 722, 2217, 727, 2242, 733, 2267, 737, 2290, 743, 2311, 747, 2331, 753, 
	238, 793, 257, 791, 279, 787, 301, 783, 325, 777, 351, 774, 378, 768, 406, 765, 437, 758, 470, 755, 504, 749, 543, 745, 582, 739, 624, 735, 669, 730, 716, 726, 767, 720, 820, 717, 876, 712, 933, 710, 994, 706, 1056, 704, 1120, 701, 1185, 703, 1251, 700, 1316, 701, 1382, 700, 1448, 703, 1511, 704, 1574, 707, 1634, 709, 1692, 713, 1748, 716, 1801, 722, 1852, 725, 1900, 731, 1945, 734, 1987, 740, 2028, 744, 2066, 750, 2101, 754, 2134, 760, 2166, 763, 2194, 768, 2221, 773, 2247, 778, 2271, 781, 2294, 786, 2316, 790, 2336, 795, 
	234, 837, 254, 834, 276, 830, 298, 828, 321, 824, 346, 822, 373, 817, 402, 814, 433, 810, 465, 807, 500, 802, 538, 799, 577, 794, 620, 792, 665, 787, 713, 784, 763, 780, 817, 778, 872, 774, 930, 772, 991, 769, 1054, 768, 1118, 765, 1184, 765, 1250, 764, 1317, 765, 1383, 764, 1449, 766, 1513, 767, 1576, 770, 1637, 771, 1696, 775, 1752, 777, 1805, 781, 1856, 783, 1904, 788, 1949, 790, 1992, 795, 2031, 798, 2069, 803, 2104, 805, 2137, 810, 2168, 813, 2197, 817, 2224, 820, 2251, 824, 2275, 826, 2298, 830, 2320, 833, 2340, 837, 
	233, 879, 252, 878, 273, 875, 295, 874, 318, 871, 344, 869, 371, 866, 399, 865, 429, 861, 462, 860, 497, 857, 534, 855, 578, 850, 617, 849, 662, 846, 709, 844, 761, 841, 813, 840, 869, 837, 928, 836, 990, 833, 1053, 833, 1117, 831, 1183, 831, 1250, 829, 1317, 831, 1384, 830, 1450, 832, 1515, 831, 1578, 834, 1639, 834, 1698, 837, 1754, 838, 1808, 842, 1859, 843, 1907, 846, 1953, 847, 1996, 852, 2035, 853, 2072, 856, 2107, 858, 2141, 861, 2172, 863, 2201, 866, 2229, 867, 2254, 871, 2278, 872, 2301, 875, 2321, 876, 2341, 879, 
	231, 923, 251, 922, 270, 921, 294, 920, 317, 918, 342, 918, 369, 916, 397, 915, 428, 913, 461, 913, 497, 910, 533, 911, 572, 908, 615, 907, 660, 905, 708, 905, 758, 903, 813, 902, 868, 900, 927, 900, 988, 898, 1052, 899, 1117, 897, 1184, 898, 1250, 896, 1317, 898, 1384, 896, 1451, 898, 1516, 897, 1579, 899, 1641, 898, 1700, 901, 1757, 901, 1811, 903, 1862, 903, 1910, 905, 1955, 906, 1997, 908, 2038, 908, 2076, 910, 2110, 911, 2143, 912, 2175, 913, 2203, 915, 2230, 915, 2256, 918, 2280, 918, 2302, 920, 2323, 920, 2343, 923, 
	231, 966, 251, 966, 271, 966, 293, 967, 316, 965, 341, 966, 368, 965, 396, 966, 427, 965, 461, 966, 496, 965, 533, 966, 572, 965, 614, 966, 661, 965, 707, 966, 758, 964, 812, 965, 867, 964, 927, 965, 989, 963, 1052, 965, 1116, 963, 1183, 965, 1251, 963, 1318, 965, 1384, 963, 1451, 964, 1517, 963, 1580, 964, 1643, 963, 1701, 964, 1757, 963, 1811, 964, 1862, 963, 1910, 964, 1955, 963, 1998, 965, 2038, 963, 2077, 965, 2111, 963, 2145, 964, 2176, 963, 2204, 965, 2231, 963, 2257, 965, 2281, 964, 2303, 965, 2324, 964, 2344, 965, 
	231, 1009, 252, 1011, 272, 1011, 294, 1013, 317, 1013, 342, 1015, 369, 1015, 397, 1017, 427, 1017, 461, 1020, 497, 1020, 534, 1022, 573, 1022, 616, 1025, 663, 1024, 710, 1028, 759, 1026, 813, 1028, 869, 1027, 927, 1030, 988, 1030, 1052, 1031, 1117, 1030, 1183, 1032, 1250, 1031, 1318, 1032, 1385, 1029, 1451, 1030, 1516, 1028, 1580, 1029, 1641, 1028, 1700, 1028, 1758, 1026, 1811, 1026, 1861, 1024, 1910, 1024, 1955, 1021, 1997, 1021, 2038, 1019, 2076, 1019, 2111, 1017, 2143, 1016, 2176, 1014, 2204, 1014, 2231, 1012, 2255, 1014, 2280, 1010, 2302, 1010, 2323, 1008, 2344, 1007, 
	234, 1051, 253, 1055, 274, 1057, 295, 1059, 318, 1061, 344, 1064, 371, 1065, 399, 1068, 429, 1070, 462, 1073, 497, 1074, 535, 1078, 575, 1079, 617, 1082, 665, 1085, 711, 1087, 764, 1088, 815, 1091, 869, 1091, 928, 1095, 990, 1095, 1053, 1097, 1117, 1097, 1184, 1099, 1251, 1098, 1318, 1099, 1384, 1097, 1450, 1098, 1515, 1095, 1578, 1096, 1639, 1092, 1699, 1092, 1755, 1089, 1808, 1088, 1861, 1084, 1908, 1083, 1953, 1079, 1996, 1078, 2036, 1074, 2074, 1073, 2109, 1070, 2142, 1068, 2173, 1065, 2203, 1063, 2229, 1060, 2255, 1059, 2277, 1058, 2301, 1055, 2322, 1052, 2342, 1052, 
	235, 1095, 255, 1099, 276, 1102, 298, 1105, 321, 1107, 346, 1112, 373, 1114, 402, 1119, 433, 1121, 465, 1125, 500, 1128, 538, 1131, 577, 1135, 621, 1140, 665, 1142, 712, 1147, 763, 1148, 816, 1153, 873, 1154, 931, 1159, 992, 1159, 1055, 1162, 1119, 1162, 1185, 1164, 1252, 1163, 1318, 1165, 1384, 1163, 1450, 1163, 1514, 1160, 1577, 1159, 1638, 1156, 1697, 1155, 1752, 1150, 1805, 1148, 1858, 1144, 1904, 1141, 1951, 1137, 1993, 1133, 2033, 1129, 2071, 1127, 2105, 1121, 2138, 1118, 2170, 1115, 2198, 1112, 2227, 1108, 2253, 1106, 2276, 1102, 2299, 1099, 2320, 1095, 2340, 1093, 
	238, 1138, 258, 1143, 279, 1146, 302, 1151, 325, 1154, 350, 1159, 378, 1163, 406, 1168, 437, 1172, 470, 1177, 505, 1181, 542, 1187, 581, 1190, 624, 1197, 669, 1200, 716, 1205, 769, 1209, 821, 1213, 875, 1216, 934, 1220, 995, 1222, 1057, 1225, 1120, 1226, 1186, 1228, 1252, 1228, 1318, 1229, 1384, 1227, 1449, 1227, 1512, 1223, 1574, 1222, 1635, 1218, 1693, 1215, 1749, 1210, 1802, 1208, 1853, 1202, 1901, 1198, 1946, 1192, 1989, 1188, 2028, 1183, 2067, 1179, 2101, 1173, 2135, 1170, 2166, 1164, 2197, 1161, 2223, 1156, 2249, 1151, 2273, 1147, 2295, 1143, 2317, 1139, 2337, 1135, 
	242, 1180, 262, 1186, 284, 1190, 307, 1196, 330, 1200, 356, 1206, 383, 1211, 412, 1218, 442, 1222, 475, 1229, 510, 1233, 548, 1241, 587, 1246, 630, 1252, 675, 1256, 722, 1262, 772, 1266, 825, 1272, 880, 1277, 938, 1281, 998, 1284, 1060, 1287, 1123, 1288, 1188, 1291, 1253, 1290, 1318, 1292, 1383, 1289, 1448, 1289, 1510, 1285, 1572, 1284, 1632, 1279, 1690, 1275, 1745, 1269, 1797, 1266, 1851, 1259, 1897, 1254, 1942, 1249, 1984, 1243, 2024, 1236, 2061, 1231, 2097, 1224, 2130, 1219, 2161, 1213, 2190, 1208, 2219, 1202, 2244, 1197, 2269, 1191, 2291, 1187, 2312, 1182, 2333, 1178, 
	247, 1222, 268, 1228, 289, 1234, 313, 1240, 336, 1245, 362, 1253, 389, 1258, 418, 1266, 449, 1271, 482, 1279, 517, 1286, 555, 1292, 594, 1298, 637, 1305, 681, 1311, 729, 1319, 778, 1324, 831, 1330, 885, 1334, 943, 1340, 1002, 1343, 1063, 1347, 1124, 1350, 1189, 1351, 1254, 1351, 1318, 1352, 1382, 1350, 1446, 1349, 1508, 1345, 1569, 1342, 1628, 1337, 1686, 1333, 1740, 1326, 1792, 1322, 1843, 1314, 1891, 1309, 1936, 1302, 1978, 1296, 2018, 1288, 2055, 1282, 2090, 1274, 2124, 1268, 2157, 1260, 2185, 1255, 2213, 1247, 2239, 1242, 2263, 1235, 2286, 1230, 2307, 1224, 2328, 1219, 
	254, 1263, 274, 1270, 296, 1276, 319, 1282, 343, 1290, 369, 1298, 396, 1304, 425, 1312, 456, 1319, 489, 1327, 525, 1334, 562, 1342, 602, 1349, 644, 1357, 688, 1364, 735, 1372, 785, 1378, 837, 1385, 891, 1390, 948, 1396, 1006, 1399, 1067, 1404, 1128, 1406, 1191, 1408, 1255, 1408, 1318, 1409, 1381, 1407, 1444, 1406, 1505, 1402, 1565, 1399, 1623, 1393, 1680, 1388, 1735, 1381, 1786, 1376, 1836, 1368, 1883, 1362, 1929, 1354, 1972, 1346, 2012, 1338, 2048, 1331, 2084, 1320, 2118, 1315, 2149, 1307, 2178, 1300, 2206, 1293, 2232, 1285, 2257, 1278, 2280, 1272, 2302, 1265, 2322, 1259, 
	261, 1303, 281, 1311, 303, 1318, 326, 1326, 349, 1334, 377, 1342, 404, 1348, 434, 1358, 463, 1366, 498, 1375, 533, 1382, 570, 1392, 611, 1398, 652, 1409, 697, 1415, 744, 1424, 793, 1432, 845, 1438, 898, 1443, 954, 1450, 1012, 1454, 1071, 1459, 1131, 1461, 1193, 1464, 1256, 1464, 1318, 1464, 1380, 1462, 1442, 1461, 1502, 1456, 1561, 1453, 1619, 1447, 1675, 1442, 1729, 1435, 1780, 1428, 1830, 1420, 1879, 1412, 1921, 1403, 1963, 1396, 2003, 1387, 2041, 1379, 2076, 1370, 2109, 1362, 2141, 1353, 2170, 1345, 2201, 1337, 2224, 1330, 2250, 1320, 2273, 1315, 2295, 1305, 2315, 1299, 
	268, 1343, 289, 1351, 311, 1359, 335, 1368, 360, 1375, 385, 1385, 414, 1393, 443, 1403, 474, 1411, 507, 1421, 542, 1429, 580, 1439, 620, 1449, 662, 1457, 705, 1464, 752, 1474, 801, 1481, 852, 1489, 905, 1495, 960, 1501, 1017, 1507, 1075, 1511, 1134, 1513, 1195, 1516, 1257, 1516, 1318, 1517, 1379, 1515, 1440, 1513, 1499, 1510, 1557, 1505, 1614, 1499, 1669, 1493, 1723, 1485, 1773, 1479, 1822, 1469, 1869, 1462, 1913, 1453, 1955, 1444, 1995, 1434, 2032, 1426, 2067, 1416, 2101, 1407, 2132, 1397, 2162, 1389, 2190, 1379, 2217, 1371, 2242, 1362, 2265, 1354, 2287, 1346, 2307, 1340, 
	277, 1381, 298, 1391, 320, 1398, 344, 1408, 369, 1416, 395, 1426, 423, 1435, 452, 1446, 482, 1454, 518, 1465, 555, 1474, 590, 1484, 629, 1493, 672, 1503, 718, 1512, 761, 1521, 809, 1528, 860, 1537, 912, 1544, 966, 1551, 1022, 1555, 1080, 1560, 1138, 1563, 1198, 1566, 1258, 1566, 1318, 1566, 1377, 1564, 1437, 1562, 1496, 1558, 1552, 1554, 1610, 1547, 1663, 1542, 1715, 1533, 1767, 1526, 1814, 1517, 1860, 1508, 1903, 1498, 1945, 1490, 1985, 1479, 2023, 1470, 2058, 1459, 2091, 1450, 2123, 1439, 2153, 1431, 2181, 1421, 2208, 1412, 2233, 1403, 2257, 1393, 2279, 1384, 2300, 1378, 
	286, 1418, 307, 1428, 328, 1437, 353, 1447, 378, 1456, 405, 1467, 433, 1476, 462, 1486, 494, 1497, 528, 1507, 564, 1517, 601, 1527, 639, 1537, 682, 1548, 725, 1556, 770, 1566, 820, 1575, 866, 1583, 919, 1590, 972, 1597, 1028, 1601, 1084, 1606, 1141, 1609, 1200, 1612, 1259, 1612, 1317, 1613, 1376, 1611, 1435, 1609, 1492, 1604, 1548, 1600, 1604, 1594, 1657, 1588, 1709, 1579, 1758, 1573, 1806, 1562, 1852, 1554, 1895, 1543, 1936, 1534, 1976, 1522, 2013, 1513, 2048, 1502, 2081, 1492, 2113, 1481, 2143, 1471, 2172, 1460, 2197, 1451, 2224, 1441, 2248, 1431, 2271, 1421, 2292, 1414, 
	295, 1455, 317, 1465, 340, 1474, 364, 1485, 389, 1495, 416, 1506, 444, 1516, 475, 1528, 506, 1537, 539, 1549, 575, 1559, 612, 1570, 650, 1579, 692, 1590, 735, 1599, 780, 1610, 827, 1618, 876, 1627, 927, 1634, 979, 1641, 1034, 1645, 1089, 1650, 1145, 1653, 1202, 1656, 1260, 1656, 1318, 1657, 1375, 1654, 1432, 1653, 1489, 1648, 1544, 1644, 1598, 1637, 1650, 1634, 1703, 1620, 1750, 1615, 1797, 1605, 1843, 1596, 1886, 1585, 1927, 1576, 1967, 1564, 2003, 1556, 2038, 1542, 2071, 1532, 2103, 1521, 2133, 1510, 2161, 1499, 2188, 1490, 2214, 1479, 2238, 1469, 2262, 1457, 2283, 1449, 
	306, 1491, 328, 1501, 351, 1511, 375, 1522, 400, 1531, 427, 1544, 455, 1554, 485, 1566, 517, 1576, 551, 1588, 586, 1598, 623, 1610, 661, 1620, 703, 1631, 745, 1640, 790, 1650, 836, 1658, 885, 1668, 934, 1674, 986, 1682, 1039, 1687, 1094, 1691, 1148, 1694, 1205, 1696, 1261, 1696, 1317, 1697, 1373, 1696, 1429, 1694, 1485, 1689, 1541, 1684, 1592, 1678, 1644, 1672, 1693, 1663, 1742, 1656, 1789, 1646, 1833, 1636, 1876, 1625, 1917, 1615, 1956, 1604, 1993, 1593, 2028, 1581, 2061, 1571, 2093, 1558, 2122, 1549, 2151, 1536, 2177, 1527, 2204, 1513, 2230, 1505, 2252, 1492, 2273, 1485, 
	317, 1525, 338, 1536, 362, 1546, 387, 1558, 412, 1568, 439, 1580, 467, 1590, 497, 1602, 528, 1613, 562, 1623, 597, 1636, 634, 1647, 672, 1658, 714, 1669, 756, 1678, 800, 1688, 845, 1696, 893, 1706, 944, 1715, 993, 1720, 1045, 1725, 1099, 1730, 1152, 1733, 1207, 1736, 1263, 1736, 1317, 1736, 1372, 1734, 1427, 1731, 1481, 1728, 1534, 1724, 1586, 1717, 1637, 1710, 1686, 1702, 1733, 1694, 1779, 1684, 1825, 1672, 1866, 1664, 1907, 1654, 1946, 1642, 1983, 1630, 2018, 1618, 2051, 1608, 2083, 1595, 2113, 1585, 2141, 1573, 2168, 1562, 2196, 1547, 2219, 1538, 2241, 1528, 2264, 1518, 
	328, 1558, 350, 1569, 373, 1579, 397, 1591, 423, 1603, 452, 1615, 479, 1625, 511, 1639, 541, 1649, 576, 1661, 610, 1673, 646, 1683, 685, 1695, 724, 1706, 766, 1715, 812, 1724, 855, 1733, 902, 1742, 952, 1750, 1000, 1755, 1053, 1762, 1104, 1766, 1156, 1769, 1209, 1771, 1264, 1774, 1317, 1772, 1372, 1772, 1424, 1767, 1477, 1765, 1528, 1759, 1581, 1752, 1631, 1746, 1678, 1739, 1725, 1732, 1771, 1720, 1816, 1709, 1856, 1702, 1897, 1687, 1936, 1677, 1972, 1668, 2008, 1655, 2041, 1643, 2073, 1631, 2103, 1618, 2132, 1607, 2159, 1595, 2185, 1582, 2209, 1572, 2233, 1558, 2254, 1546, 


	// 303, 377, 323, 365, 346, 355, 371, 343, 396, 332, 424, 320, 452, 307, 482, 296, 513, 283, 547, 271, 582, 260, 619, 247, 658, 235, 698, 223, 741, 212, 784, 201, 831, 192, 878, 184, 928, 175, 977, 168, 1028, 162, 1082, 156, 1135, 153, 1189, 150, 1243, 148, 1299, 148, 1354, 148, 1408, 150, 1461, 153, 1514, 158, 1565, 164, 1617, 172, 1666, 178, 1714, 187, 1758, 196, 1803, 206, 1845, 215, 1884, 227, 1924, 238, 1961, 249, 1996, 261, 2029, 272, 2060, 283, 2091, 295, 2120, 307, 2147, 318, 2173, 331, 2197, 341, 2221, 352, 2243, 363, 
	// 292, 409, 313, 401, 335, 390, 361, 378, 386, 366, 413, 356, 441, 344, 471, 332, 504, 318, 536, 307, 572, 294, 608, 284, 647, 272, 687, 262, 731, 249, 775, 240, 822, 229, 869, 221, 919, 212, 970, 205, 1024, 199, 1077, 194, 1131, 189, 1187, 187, 1243, 185, 1300, 185, 1356, 186, 1411, 188, 1465, 190, 1519, 195, 1572, 201, 1624, 208, 1673, 216, 1722, 224, 1768, 233, 1813, 244, 1855, 253, 1896, 264, 1935, 274, 1973, 286, 2007, 297, 2042, 309, 2072, 319, 2103, 331, 2132, 341, 2158, 353, 2185, 364, 2209, 375, 2233, 385, 2253, 395, 
	// 284, 446, 302, 437, 325, 425, 349, 415, 376, 402, 402, 392, 430, 380, 460, 368, 492, 356, 526, 346, 560, 333, 597, 322, 637, 311, 678, 300, 722, 288, 766, 280, 814, 269, 862, 261, 913, 252, 965, 245, 1020, 238, 1073, 231, 1129, 229, 1186, 227, 1243, 224, 1300, 225, 1358, 224, 1413, 228, 1471, 230, 1526, 236, 1579, 241, 1631, 248, 1683, 255, 1731, 264, 1778, 274, 1823, 282, 1866, 292, 1907, 303, 1946, 313, 1984, 324, 2019, 335, 2052, 346, 2084, 356, 2114, 368, 2142, 379, 2170, 389, 2196, 400, 2220, 411, 2243, 420, 2263, 431, 
	// 273, 481, 295, 472, 316, 463, 340, 452, 364, 441, 392, 431, 420, 419, 450, 407, 483, 396, 515, 386, 550, 374, 587, 363, 627, 351, 668, 342, 712, 331, 757, 321, 806, 311, 854, 303, 906, 294, 960, 288, 1014, 280, 1070, 277, 1126, 272, 1184, 270, 1242, 268, 1302, 268, 1360, 267, 1417, 270, 1474, 273, 1531, 278, 1586, 283, 1639, 291, 1690, 297, 1740, 306, 1788, 314, 1833, 324, 1877, 333, 1917, 343, 1957, 353, 1995, 365, 2030, 375, 2064, 386, 2095, 396, 2125, 407, 2153, 417, 2180, 427, 2205, 436, 2230, 448, 2252, 456, 2274, 467, 
	// 265, 518, 283, 510, 307, 500, 330, 491, 356, 481, 382, 471, 410, 459, 441, 449, 472, 437, 505, 427, 540, 415, 579, 405, 617, 395, 659, 385, 703, 374, 749, 365, 796, 356, 847, 347, 899, 339, 953, 333, 1009, 326, 1067, 322, 1125, 316, 1182, 314, 1242, 312, 1302, 313, 1363, 313, 1420, 316, 1479, 318, 1536, 323, 1592, 327, 1646, 335, 1698, 341, 1748, 350, 1797, 358, 1843, 367, 1886, 376, 1928, 387, 1968, 396, 2005, 406, 2041, 416, 2074, 427, 2106, 436, 2136, 447, 2163, 456, 2190, 467, 2216, 476, 2239, 486, 2261, 494, 2283, 503, 
	// 257, 556, 275, 549, 299, 539, 321, 531, 347, 520, 373, 512, 401, 502, 433, 491, 462, 480, 496, 470, 531, 460, 569, 451, 608, 440, 651, 430, 694, 421, 741, 413, 789, 402, 840, 395, 893, 386, 947, 381, 1005, 372, 1063, 369, 1122, 364, 1181, 363, 1242, 361, 1304, 361, 1364, 360, 1423, 364, 1484, 366, 1543, 371, 1598, 375, 1653, 382, 1707, 388, 1757, 397, 1806, 404, 1852, 414, 1896, 421, 1938, 431, 1978, 440, 2015, 450, 2051, 459, 2084, 470, 2115, 478, 2145, 488, 2173, 498, 2200, 507, 2225, 515, 2248, 525, 2270, 532, 2292, 541, 
	// 251, 594, 271, 587, 290, 579, 313, 571, 338, 562, 365, 554, 393, 544, 422, 535, 453, 525, 487, 516, 523, 506, 560, 497, 600, 487, 642, 479, 686, 468, 734, 460, 782, 451, 834, 444, 887, 436, 942, 430, 1001, 423, 1058, 419, 1119, 415, 1180, 413, 1242, 411, 1304, 412, 1366, 411, 1429, 413, 1488, 417, 1547, 422, 1603, 424, 1661, 432, 1714, 437, 1765, 445, 1814, 452, 1861, 461, 1905, 469, 1948, 478, 1987, 486, 2025, 496, 2060, 504, 2094, 514, 2125, 522, 2155, 531, 2183, 539, 2208, 548, 2233, 556, 2257, 565, 2279, 572, 2300, 580, 
	// 243, 635, 262, 629, 282, 621, 306, 614, 331, 605, 357, 598, 385, 589, 414, 580, 446, 571, 479, 563, 515, 553, 552, 545, 592, 536, 634, 528, 680, 517, 726, 510, 775, 501, 827, 495, 881, 487, 938, 485, 997, 476, 1055, 474, 1116, 469, 1179, 468, 1243, 466, 1306, 465, 1368, 465, 1430, 467, 1491, 469, 1552, 474, 1611, 478, 1667, 484, 1721, 489, 1773, 497, 1822, 503, 1869, 511, 1913, 518, 1956, 527, 1996, 534, 2034, 543, 2069, 551, 2102, 559, 2133, 566, 2163, 575, 2190, 582, 2216, 590, 2241, 597, 2266, 605, 2287, 612, 2308, 619, 
	// 235, 675, 255, 670, 278, 662, 300, 656, 325, 649, 350, 641, 378, 634, 407, 627, 438, 618, 472, 611, 507, 602, 545, 594, 585, 586, 627, 579, 672, 570, 718, 564, 769, 556, 821, 549, 876, 542, 934, 537, 994, 532, 1054, 529, 1115, 525, 1176, 523, 1242, 522, 1307, 522, 1371, 520, 1433, 524, 1494, 525, 1557, 530, 1616, 533, 1673, 538, 1728, 544, 1780, 550, 1830, 556, 1877, 563, 1920, 569, 1964, 577, 2004, 584, 2041, 592, 2077, 599, 2111, 607, 2141, 613, 2171, 621, 2198, 627, 2224, 634, 2249, 641, 2271, 648, 2293, 653, 2314, 660, 
	// 233, 718, 250, 712, 273, 705, 295, 701, 319, 693, 343, 687, 372, 681, 401, 675, 432, 667, 466, 660, 501, 652, 538, 646, 578, 638, 620, 631, 666, 624, 714, 618, 763, 612, 816, 605, 872, 600, 930, 595, 989, 591, 1050, 588, 1113, 583, 1178, 583, 1243, 581, 1307, 581, 1371, 578, 1435, 582, 1499, 584, 1561, 588, 1621, 590, 1678, 596, 1734, 600, 1786, 606, 1836, 610, 1884, 618, 1929, 622, 1971, 629, 2011, 635, 2048, 642, 2084, 647, 2117, 655, 2148, 660, 2178, 667, 2205, 673, 2229, 679, 2255, 684, 2277, 690, 2299, 695, 2319, 700, 
	// 228, 758, 245, 755, 267, 749, 290, 744, 314, 739, 340, 735, 367, 728, 396, 723, 427, 716, 459, 711, 495, 704, 533, 698, 573, 692, 616, 687, 661, 679, 709, 675, 759, 668, 811, 662, 867, 659, 925, 654, 987, 651, 1048, 647, 1112, 644, 1176, 644, 1241, 641, 1308, 642, 1374, 642, 1438, 644, 1502, 644, 1564, 648, 1626, 650, 1683, 654, 1739, 657, 1792, 663, 1842, 667, 1890, 672, 1935, 677, 1977, 683, 2017, 687, 2054, 693, 2090, 698, 2123, 704, 2154, 708, 2183, 714, 2210, 719, 2236, 724, 2260, 728, 2284, 733, 2303, 738, 2324, 743, 
	// 225, 800, 242, 798, 265, 794, 286, 790, 310, 785, 335, 781, 363, 776, 392, 773, 423, 766, 456, 764, 492, 757, 529, 753, 569, 747, 611, 742, 657, 737, 705, 733, 756, 728, 809, 724, 864, 718, 924, 715, 985, 712, 1047, 711, 1110, 707, 1176, 707, 1243, 706, 1308, 706, 1376, 704, 1441, 706, 1505, 706, 1568, 709, 1629, 711, 1687, 715, 1743, 717, 1796, 721, 1847, 724, 1895, 729, 1939, 732, 1982, 737, 2022, 740, 2060, 746, 2095, 748, 2128, 754, 2159, 757, 2188, 763, 2215, 766, 2241, 770, 2265, 773, 2287, 777, 2309, 780, 2328, 785, 
	// 223, 843, 241, 841, 261, 838, 284, 836, 307, 830, 333, 827, 360, 825, 389, 821, 420, 819, 452, 816, 488, 810, 525, 807, 565, 802, 608, 800, 653, 795, 702, 792, 753, 787, 806, 785, 862, 781, 921, 779, 983, 776, 1046, 774, 1109, 773, 1176, 772, 1243, 770, 1309, 772, 1377, 770, 1442, 771, 1507, 770, 1571, 773, 1632, 774, 1690, 777, 1747, 778, 1800, 782, 1850, 784, 1899, 787, 1944, 789, 1986, 793, 2026, 795, 2064, 799, 2098, 801, 2132, 805, 2162, 807, 2191, 811, 2218, 813, 2244, 817, 2268, 819, 2290, 822, 2311, 824, 2331, 828, 
	// 221, 886, 239, 885, 260, 883, 282, 881, 307, 878, 333, 878, 357, 874, 387, 871, 419, 867, 451, 869, 486, 864, 523, 862, 564, 859, 607, 857, 653, 854, 700, 852, 751, 848, 804, 847, 861, 844, 922, 843, 982, 840, 1045, 840, 1109, 838, 1177, 837, 1242, 836, 1310, 836, 1378, 835, 1443, 837, 1509, 836, 1572, 838, 1633, 838, 1692, 839, 1749, 840, 1803, 842, 1853, 843, 1901, 846, 1947, 846, 1988, 849, 2029, 851, 2066, 853, 2101, 854, 2134, 856, 2165, 857, 2194, 860, 2221, 861, 2246, 863, 2270, 864, 2292, 867, 2315, 868, 2333, 870, 
	// 219, 931, 238, 930, 258, 929, 282, 929, 305, 925, 331, 925, 357, 924, 387, 924, 418, 922, 450, 919, 486, 916, 524, 918, 563, 915, 606, 916, 652, 914, 700, 913, 751, 911, 804, 910, 861, 908, 920, 908, 982, 907, 1045, 907, 1110, 905, 1177, 905, 1244, 903, 1311, 904, 1378, 903, 1445, 904, 1510, 902, 1573, 903, 1635, 903, 1693, 904, 1750, 903, 1804, 904, 1855, 904, 1902, 905, 1948, 904, 1990, 906, 2029, 905, 2068, 907, 2103, 907, 2136, 909, 2166, 908, 2195, 910, 2222, 909, 2247, 911, 2271, 911, 2293, 912, 2318, 913, 2334, 913, 
	// 222, 973, 240, 973, 259, 973, 282, 974, 307, 973, 332, 974, 358, 973, 388, 973, 419, 972, 451, 973, 487, 973, 524, 973, 564, 973, 607, 973, 653, 973, 700, 973, 751, 972, 805, 973, 862, 972, 921, 973, 983, 972, 1046, 973, 1111, 971, 1177, 972, 1245, 971, 1312, 971, 1379, 969, 1445, 970, 1510, 968, 1574, 969, 1635, 967, 1693, 967, 1751, 966, 1804, 966, 1855, 964, 1903, 964, 1948, 962, 1990, 963, 2031, 961, 2068, 962, 2103, 960, 2136, 960, 2166, 959, 2195, 959, 2222, 958, 2247, 958, 2271, 957, 2293, 957, 2315, 956, 2335, 957, 
	// 224, 1016, 243, 1018, 262, 1018, 284, 1021, 308, 1020, 333, 1023, 359, 1023, 389, 1024, 420, 1025, 453, 1026, 488, 1027, 527, 1029, 566, 1029, 609, 1031, 655, 1032, 703, 1034, 754, 1033, 807, 1035, 863, 1035, 922, 1038, 984, 1038, 1047, 1039, 1112, 1038, 1178, 1039, 1245, 1038, 1312, 1039, 1379, 1036, 1445, 1036, 1510, 1034, 1573, 1034, 1634, 1031, 1693, 1031, 1750, 1028, 1803, 1027, 1854, 1025, 1902, 1023, 1947, 1021, 1990, 1020, 2029, 1017, 2067, 1016, 2102, 1014, 2135, 1012, 2165, 1009, 2194, 1008, 2221, 1006, 2245, 1005, 2270, 1003, 2292, 1002, 2315, 1000, 2334, 1000, 
	// 226, 1060, 244, 1062, 266, 1064, 286, 1066, 311, 1068, 335, 1071, 363, 1073, 393, 1075, 424, 1076, 456, 1080, 492, 1081, 529, 1085, 570, 1085, 612, 1089, 657, 1091, 706, 1093, 756, 1094, 810, 1098, 866, 1099, 925, 1102, 986, 1102, 1049, 1104, 1113, 1105, 1179, 1105, 1245, 1104, 1313, 1105, 1379, 1102, 1445, 1102, 1509, 1099, 1572, 1098, 1633, 1095, 1691, 1094, 1748, 1090, 1801, 1088, 1852, 1084, 1900, 1082, 1945, 1078, 1987, 1076, 2027, 1071, 2065, 1069, 2100, 1066, 2133, 1064, 2163, 1060, 2192, 1058, 2219, 1055, 2244, 1052, 2268, 1049, 2290, 1047, 2312, 1045, 2332, 1044, 
	// 230, 1102, 248, 1106, 269, 1108, 290, 1112, 314, 1115, 340, 1119, 368, 1121, 396, 1126, 429, 1129, 459, 1132, 496, 1135, 533, 1139, 574, 1142, 616, 1146, 662, 1149, 710, 1153, 760, 1155, 814, 1159, 870, 1160, 928, 1164, 989, 1166, 1051, 1168, 1115, 1168, 1181, 1170, 1246, 1169, 1313, 1170, 1379, 1167, 1444, 1166, 1508, 1164, 1570, 1163, 1631, 1158, 1689, 1155, 1744, 1150, 1798, 1148, 1849, 1143, 1896, 1140, 1941, 1134, 1984, 1131, 2024, 1125, 2061, 1123, 2096, 1118, 2129, 1115, 2160, 1109, 2188, 1106, 2215, 1102, 2241, 1099, 2266, 1093, 2288, 1092, 2308, 1087, 2330, 1085, 
	// 233, 1144, 252, 1148, 274, 1152, 295, 1155, 320, 1161, 345, 1165, 372, 1169, 403, 1175, 433, 1177, 466, 1183, 501, 1187, 539, 1193, 579, 1196, 621, 1202, 667, 1205, 715, 1211, 765, 1214, 818, 1219, 874, 1221, 932, 1226, 993, 1228, 1054, 1231, 1118, 1231, 1182, 1233, 1247, 1232, 1313, 1233, 1378, 1231, 1442, 1230, 1506, 1225, 1568, 1224, 1628, 1219, 1686, 1216, 1742, 1211, 1794, 1207, 1844, 1201, 1892, 1197, 1938, 1190, 1980, 1185, 2019, 1180, 2056, 1175, 2092, 1168, 2125, 1165, 2156, 1160, 2185, 1155, 2210, 1149, 2237, 1144, 2261, 1139, 2283, 1135, 2305, 1131, 2327, 1126, 
	// 239, 1186, 258, 1192, 278, 1196, 301, 1200, 324, 1205, 352, 1213, 377, 1217, 408, 1223, 439, 1227, 472, 1233, 508, 1238, 546, 1245, 586, 1250, 628, 1257, 673, 1260, 721, 1267, 771, 1271, 824, 1277, 879, 1280, 937, 1285, 997, 1288, 1057, 1291, 1120, 1292, 1184, 1294, 1248, 1293, 1313, 1294, 1378, 1291, 1441, 1290, 1504, 1286, 1565, 1283, 1624, 1279, 1682, 1274, 1737, 1269, 1790, 1264, 1840, 1256, 1886, 1252, 1932, 1244, 1973, 1239, 2013, 1232, 2051, 1226, 2086, 1219, 2119, 1213, 2150, 1207, 2179, 1202, 2207, 1195, 2232, 1190, 2256, 1183, 2278, 1179, 2300, 1173, 2318, 1169, 
	// 245, 1227, 265, 1233, 284, 1238, 309, 1245, 332, 1250, 358, 1257, 386, 1263, 415, 1270, 447, 1276, 482, 1282, 515, 1288, 555, 1297, 593, 1302, 636, 1309, 680, 1314, 728, 1322, 778, 1326, 831, 1333, 885, 1337, 942, 1343, 1001, 1345, 1061, 1349, 1123, 1351, 1186, 1353, 1249, 1353, 1313, 1353, 1377, 1350, 1439, 1349, 1501, 1344, 1562, 1341, 1621, 1336, 1677, 1331, 1732, 1325, 1783, 1319, 1833, 1312, 1881, 1305, 1925, 1297, 1966, 1291, 2007, 1283, 2044, 1276, 2080, 1269, 2113, 1262, 2144, 1254, 2173, 1248, 2201, 1241, 2224, 1234, 2251, 1226, 2273, 1222, 2293, 1215, 2315, 1210, 
	// 252, 1268, 270, 1274, 292, 1280, 315, 1287, 340, 1293, 366, 1301, 394, 1308, 423, 1317, 456, 1321, 488, 1331, 524, 1337, 562, 1346, 601, 1353, 644, 1360, 689, 1366, 736, 1375, 785, 1380, 837, 1387, 891, 1392, 948, 1398, 1006, 1401, 1065, 1405, 1126, 1407, 1188, 1409, 1250, 1408, 1313, 1409, 1376, 1406, 1437, 1404, 1498, 1400, 1558, 1397, 1616, 1391, 1671, 1386, 1726, 1378, 1777, 1372, 1826, 1364, 1873, 1357, 1918, 1348, 1959, 1341, 1999, 1332, 2036, 1329, 2072, 1316, 2106, 1309, 2136, 1300, 2166, 1293, 2194, 1284, 2219, 1278, 2244, 1270, 2267, 1263, 2288, 1256, 2309, 1251, 
	// 260, 1308, 279, 1314, 300, 1321, 323, 1330, 348, 1336, 374, 1345, 404, 1352, 433, 1361, 463, 1367, 498, 1377, 532, 1384, 571, 1394, 611, 1401, 653, 1410, 697, 1416, 744, 1424, 793, 1431, 844, 1439, 898, 1444, 953, 1450, 1011, 1454, 1069, 1458, 1129, 1460, 1190, 1462, 1251, 1462, 1313, 1462, 1374, 1460, 1435, 1458, 1495, 1453, 1554, 1449, 1611, 1444, 1666, 1437, 1719, 1430, 1771, 1424, 1819, 1414, 1865, 1407, 1910, 1398, 1951, 1390, 1991, 1381, 2028, 1373, 2064, 1363, 2097, 1355, 2128, 1346, 2158, 1338, 2186, 1329, 2211, 1320, 2236, 1311, 2259, 1304, 2280, 1297, 2302, 1291, 
	// 268, 1345, 288, 1354, 309, 1361, 332, 1371, 356, 1377, 384, 1388, 412, 1394, 443, 1404, 474, 1412, 507, 1421, 543, 1429, 581, 1440, 620, 1449, 663, 1457, 707, 1465, 753, 1473, 801, 1480, 852, 1487, 905, 1493, 960, 1500, 1016, 1504, 1074, 1508, 1132, 1510, 1192, 1513, 1251, 1513, 1313, 1513, 1373, 1511, 1432, 1508, 1492, 1504, 1549, 1500, 1605, 1493, 1660, 1487, 1712, 1480, 1763, 1472, 1811, 1463, 1857, 1455, 1901, 1445, 1943, 1437, 1982, 1427, 2019, 1418, 2055, 1408, 2088, 1399, 2119, 1389, 2149, 1380, 2176, 1371, 2203, 1362, 2228, 1352, 2252, 1345, 2274, 1336, 2296, 1329, 
	// 278, 1385, 296, 1392, 317, 1399, 342, 1409, 367, 1418, 394, 1428, 424, 1436, 453, 1447, 484, 1455, 516, 1465, 553, 1474, 591, 1484, 631, 1492, 671, 1502, 716, 1510, 762, 1519, 810, 1526, 860, 1534, 913, 1541, 966, 1547, 1022, 1552, 1078, 1556, 1135, 1557, 1194, 1561, 1253, 1561, 1313, 1561, 1372, 1557, 1430, 1556, 1487, 1552, 1544, 1548, 1600, 1541, 1653, 1535, 1705, 1527, 1755, 1519, 1802, 1509, 1849, 1501, 1892, 1492, 1933, 1482, 1973, 1471, 2010, 1462, 2045, 1451, 2077, 1442, 2110, 1431, 2140, 1422, 2168, 1411, 2194, 1402, 2219, 1392, 2243, 1383, 2265, 1374, 2288, 1366, 
	// 287, 1421, 306, 1429, 329, 1438, 353, 1448, 379, 1457, 405, 1467, 434, 1476, 463, 1486, 494, 1497, 528, 1507, 563, 1516, 603, 1527, 641, 1535, 683, 1545, 726, 1554, 771, 1562, 819, 1570, 868, 1578, 919, 1585, 973, 1592, 1027, 1596, 1082, 1601, 1139, 1603, 1196, 1606, 1254, 1606, 1312, 1606, 1370, 1604, 1427, 1602, 1483, 1597, 1541, 1592, 1594, 1586, 1647, 1580, 1698, 1571, 1747, 1563, 1794, 1554, 1840, 1544, 1882, 1534, 1924, 1525, 1962, 1513, 2000, 1504, 2035, 1493, 2068, 1483, 2100, 1472, 2129, 1461, 2158, 1451, 2184, 1441, 2209, 1431, 2234, 1421, 2257, 1412, 2280, 1404, 
	// 297, 1456, 316, 1465, 340, 1475, 363, 1485, 388, 1494, 416, 1504, 444, 1515, 475, 1525, 508, 1535, 540, 1544, 575, 1556, 612, 1566, 652, 1575, 693, 1588, 736, 1596, 781, 1605, 827, 1613, 877, 1621, 927, 1627, 979, 1634, 1032, 1638, 1087, 1644, 1142, 1646, 1199, 1649, 1255, 1649, 1312, 1649, 1369, 1646, 1424, 1644, 1479, 1639, 1535, 1635, 1588, 1628, 1640, 1621, 1690, 1613, 1739, 1605, 1785, 1596, 1830, 1587, 1873, 1575, 1913, 1566, 1951, 1555, 1989, 1544, 2024, 1533, 2058, 1522, 2089, 1510, 2118, 1501, 2148, 1489, 2173, 1479, 2200, 1468, 2223, 1457, 2251, 1448, 2272, 1441, 
	// 306, 1491, 326, 1501, 349, 1510, 373, 1521, 399, 1532, 428, 1542, 456, 1551, 485, 1563, 517, 1573, 551, 1584, 587, 1595, 624, 1606, 662, 1614, 704, 1625, 747, 1634, 791, 1645, 837, 1652, 885, 1661, 934, 1667, 986, 1674, 1039, 1679, 1091, 1684, 1145, 1686, 1200, 1688, 1256, 1689, 1312, 1689, 1367, 1687, 1422, 1684, 1476, 1680, 1530, 1675, 1582, 1669, 1633, 1660, 1682, 1653, 1730, 1645, 1776, 1635, 1820, 1626, 1863, 1616, 1903, 1605, 1943, 1593, 1979, 1583, 2013, 1571, 2046, 1560, 2077, 1549, 2108, 1537, 2137, 1526, 2164, 1515, 2189, 1505, 2215, 1495, 2239, 1485, 2263, 1476, 
	// 318, 1525, 340, 1532, 363, 1543, 388, 1553, 414, 1565, 442, 1574, 470, 1586, 500, 1596, 534, 1607, 565, 1618, 601, 1629, 637, 1639, 676, 1651, 716, 1661, 758, 1670, 800, 1679, 847, 1687, 894, 1696, 943, 1703, 993, 1709, 1044, 1715, 1096, 1719, 1149, 1722, 1203, 1724, 1257, 1725, 1311, 1724, 1365, 1723, 1418, 1719, 1471, 1716, 1524, 1711, 1575, 1705, 1625, 1698, 1674, 1690, 1721, 1682, 1766, 1672, 1810, 1660, 1851, 1652, 1892, 1641, 1930, 1630, 1966, 1619, 2002, 1607, 2035, 1596, 2067, 1585, 2097, 1574, 2126, 1563, 2153, 1552, 2180, 1540, 2206, 1529, 2230, 1519, 2254, 1509, 
};

int _lens_w = 50;
int _lens_h = 30;
//宸ュ叿鍑芥暟
Mat getPTrans(const Point2f src[], const Point2f dst[])
{
	Mat M(3, 3, CV_64F), X(8, 1, CV_64F, M.data);
	double a[8][8], b[8];
	Mat A(8, 8, CV_64F, a), B(8, 1, CV_64F, b);

	for (int i = 0; i < 4; ++i)
	{
		a[i][0] = a[i + 4][3] = src[i].x;
		a[i][1] = a[i + 4][4] = src[i].y;
		a[i][2] = a[i + 4][5] = 1;
		a[i][3] = a[i][4] = a[i][5] =
			a[i + 4][0] = a[i + 4][1] = a[i + 4][2] = 0;
		a[i][6] = -src[i].x*dst[i].x;
		a[i][7] = -src[i].y*dst[i].x;
		a[i + 4][6] = -src[i].x*dst[i].y;
		a[i + 4][7] = -src[i].y*dst[i].y;
		b[i] = dst[i].x;
		b[i + 4] = dst[i].y;
	}

	solve(A, B, X, DECOMP_SVD);
	((double*)M.data)[8] = 1.;

	return M;
}

Mat PerspectiveTrans(const Mat &src, Point2f* scrPoints, Point2f* dstPoints)
{
	Mat dst;
	Mat Trans = getPTrans(scrPoints, dstPoints);
	//鍑芥暟閲嶅啓
	warpPerspective(src, dst, Trans, cv::Size(src.cols, src.rows), CV_INTER_CUBIC);
	return dst;
}

void pretreat(const Mat &src, Mat &dst)
{
	//璁剧疆鏇濆厜搴?
	//涓€兼护娉?
	Mat srcImage = src.clone();
	Mat medianImage;
	medianBlur(srcImage, medianImage, 3);
	Mat grayImage;
	cvtColor(medianImage, grayImage, COLOR_BGR2GRAY);
	threshold(grayImage ,dst, 100, 255, 0);
}

void cutQR(const Mat& src, Mat& dst)
{
	Mat srcImg = src.clone();
	cvtColor(srcImg, srcImg, COLOR_BGR2RGB);
	int w = srcImg.cols;
	int h = srcImg.rows;
	unsigned char *array = new unsigned char[srcImg.rows*srcImg.cols * 3];
	if (srcImg.isContinuous())
		array = srcImg.data;

	circle_code::AABB aabb;
	std::vector<circle_code::AABB> cores_aabb;
	int res = circle_code::identify_code_with_aabb(array, w, h, aabb, cores_aabb);

	cout << "find QR code." << endl;
	int ext = 48;
	int start_x = aabb.MN_X - ext;
	int start_y = aabb.MN_Y - ext;
	int width = aabb.MX_X - aabb.MN_X + 2 * ext;
	int height = aabb.MX_Y - aabb.MN_Y + 4 * ext;

	Mat tmpImg = src.clone();
	Rect roi(start_x, start_y, width, height);
	Mat mask = tmpImg(roi);
	mask = { Scalar(0,0,0) };
	dst = tmpImg.clone();
	
	// if(res >= 0)
	// {
	// 	cout << "find QR code." << endl;
	// 	int ext = 48;
	// 	int start_x = aabb.MN_X - ext;
	// 	int start_y = aabb.MN_Y - ext;
	// 	int width = aabb.MX_X - aabb.MN_X + 2 * ext;
	// 	int height = aabb.MX_Y - aabb.MN_Y + 4 * ext;

	// 	Mat tmpImg = src.clone();
	// 	Rect roi(start_x, start_y, width, height);
	// 	Mat mask = tmpImg(roi);
	// 	mask = { Scalar(0,0,0) };
	// 	dst = tmpImg.clone();
	// }
	// else
	// {
	// 	cout << "can not find QR code." << endl;
	// 	dst = src.clone();
	// }
}

void delBackground(const Mat& src, Mat& dst)
{
	Mat tmpImage = src.clone();
	Mat grayImg, thresholdImg;
	cvtColor(tmpImage, grayImg, COLOR_BGR2GRAY);
	threshold(grayImg, thresholdImg, 100, 255, 0);

	vector<Point> maxContour;
	vector<vector<Point> > contours;
	vector<Vec4i> hierarchy;
	findContours(thresholdImg, contours, hierarchy, RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE);

	int tmp_size = 0;
	int contour_index = 0;

	for (int i = 0; i < contours.size(); ++i)
	{
		if (contours[i].size() > tmp_size)
		{
			tmp_size = contours[i].size();
			contour_index = i;
		}
	}
	maxContour = contours[contour_index];
	//display
	Mat displayImg = Mat::zeros(tmpImage.size(), CV_8UC3);
	Scalar color = Scalar(255, 255, 255);
	drawContours(displayImg, contours, contour_index, color, -1, 8);
	dst = displayImg.clone();
	//dst = tmpImage.mul(displayImg) / 255;
}

Mat inverseColor(Mat& srcImage)
{
	Mat tempImage = srcImage.clone();
	int row = tempImage.rows;
	int col = tempImage.cols;
	// 鍒嗗埆瀵瑰悇涓€氶亾杩涜鍙嶈壊澶勭悊
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			tempImage.at<Vec3b>(i, j)[0] = 255 - tempImage.at<Vec3b>(i, j)[0];
			tempImage.at<Vec3b>(i, j)[1] = 255 - tempImage.at<Vec3b>(i, j)[1];
			tempImage.at<Vec3b>(i, j)[2] = 255 - tempImage.at<Vec3b>(i, j)[2];
		}
	}
	return tempImage;
}


//矫正图像
void undistortImage(const Mat &src, Mat &dst)//add height
{
    Mat srcImage = src.clone();
    int w = _lens_w;
    int h = _lens_h;

    Size size(40, 40);
    Mat im_combine = Mat::zeros(Size(size.width * (w - 1), size.width * (h - 1)), CV_8UC3);
    Mat im_dst = Mat::zeros(size, CV_8UC3);
    vector<Point2f> pts_dst;

    pts_dst.push_back(Point2f(0, 0));
    pts_dst.push_back(Point2f(size.width, 0));
    pts_dst.push_back(Point2f(size.width, size.height));
    pts_dst.push_back(Point2f(0, size.height));

    Point2f dst_array[] = {
        pts_dst[0],
        pts_dst[1],
        pts_dst[2],
        pts_dst[3]
    };

    vector<Point2f> pts_src;
    for (int i = 0; i < w - 1; i++) {
        for (int j = 0; j < h - 1; j++) {
            pts_src.push_back(
                Point2f(_lens[(i + j*w) * 2], _lens[(i + j*w) * 2 + 1]));
            pts_src.push_back(
                Point2f(_lens[((i + 1) + j*w) * 2], _lens[((i + 1) + j*w) * 2 + 1]));
            pts_src.push_back(
                Point2f(_lens[((i + 1) + (j + 1)*w) * 2], _lens[((i + 1) + (j + 1)*w) * 2 + 1]));
            pts_src.push_back(
                Point2f(_lens[(i + (j + 1)*w) * 2], _lens[(i + (j + 1)*w) * 2 + 1]));

            Point2f src_array[] = {
                pts_src[0],
                pts_src[1],
                pts_src[2],
                pts_src[3]
            };

            Mat hhh = getPerspectiveTransform(src_array, dst_array);
            pts_src.clear();
            warpPerspective(srcImage, im_dst, hhh, size);
            Mat ROI = im_combine(
                Rect(i * size.width, j * size.height, im_dst.cols, im_dst.rows));
            im_dst.copyTo(ROI);
        }
    }
    pts_src.clear();
    pts_dst.clear();

    Mat im_combine_out(im_combine, Rect(0, 0, size.width * (w - 1), size.width * (h - 1)));
    dst = im_combine_out.clone();
}

void autoFocusImage(const Mat &image, float* height)
{
	//cout << "in autoFocusImage()" << endl;
	Mat srcImage = image.clone();	
	Mat correctImg;

	float c_height = 3.0;
	undistortImage(srcImage, correctImg);
	//imwrite("correct.jpg", correctImg);

	Mat pretreatImg;
	pretreat(correctImg, pretreatImg);
	//imwrite("pretreat.jpg", pretreatImg);

	Mat dilateImage;
	cvDilate(pretreatImg, dilateImage, 3);

	imwrite("dilate.jpg", dilateImage);

	vector<vector<Point>>contours;
	vector<Vec4i>hierarchy;
	findContours(dilateImage, contours, hierarchy, CV_RETR_LIST, CV_CHAIN_APPROX_NONE);
	
	cout << "contours: " << contours.size() << endl;

	//param
	ifstream in;
	in.open("param.txt", ios::in);
	if (!in.is_open()) 
	{
		cout << "open File Failed." << endl;
		return;
	}
	string strOne;
	getline(in, strOne);
	stringstream ss;
	ss << strOne;
	float param_a;
	float param_b;
	ss >> param_a >> param_b;
	in.close();

 	if(contours.size() == 0)
 	{
 		*height = 3.0;
 	}else{
 		vector<Moments> mu(contours.size());
		mu[0] = moments(contours[0], true);
		double pixel = mu[0].m10 / mu[0].m00;
    	*height = (pixel-param_a)/param_b;
 	}

 	ofstream out("height_measure.txt");
	if (!out.is_open())
	{
		cout << "open File Failed." << endl;
		return;		
	}
	out << *height;
	out.close();
}

void findPosImage(const Mat &image, float* pos_x, float* pos_y)
{
	Mat srcImage = image.clone();
	ifstream in;
	in.open("pos.txt", ios::in);
	if (!in.is_open()) 
	{
		cout << "open File Failed." << endl;
		return;
	}
	string strOne;
	getline(in, strOne);
	stringstream ss;
	ss << strOne;
	int tmp_pos_x;
	int tmp_pos_y;
	ss >> tmp_pos_x >> tmp_pos_y;
	*pos_x = tmp_pos_x;
	*pos_y = tmp_pos_y;
	in.close();
}

void getExposureCam(int* exposure)
{
	std::cout << "enter getExposureCam()" << std::endl;
	ifstream in;
	in.open("exposure.txt", ios::in);
	if (!in.is_open()) 
	{
		cout << "open File Failed." << endl;
		return;
	}
	string strOne;
	getline(in, strOne);
	stringstream ss;
	ss << strOne;
	int tmp_exposure;
	ss >> tmp_exposure;
	*exposure = tmp_exposure;

	in.close();
}

void easyFunImg(const Mat &image, float* x, float* y, vector<vector<float> > &b)
{
	cout << "enter easyFunImg()" << endl;

	Mat srcImage = image.clone();
	Mat correctImg;

	undistortImage(srcImage, correctImg);
	flip(correctImg, correctImg, -1);
	cout << "after undistort." << endl;

	Mat mask;
	delBackground(correctImg, mask);
	Mat dekBGImage = correctImg.mul(mask) / 255;
	cout << "out delBackground()" << endl;

	Mat tmpImg = dekBGImage.clone();
	//cutQR(tmpImg, tmpImg);
	//imwrite("cutQR.jpg", tmpImg);
	//cout << "save cutQR image." << endl;

	vector<vector<Point> > contours_s;
	cutBlackline(tmpImg, mask, contours_s);

	vector<vector<Point> > red_contours_s;
 	cutRedline(tmpImg, red_contours_s);

	ifstream in;
	in.open("easy_pos.txt", ios::in);
	if (!in.is_open()) 
	{
		cout << "open File Failed." << endl;
		return;
	}
	string strTwo;
	getline(in, strTwo);
	stringstream ss;
	ss << strTwo;
	float easy_pos_x;
	float easy_pos_y;
	ss >> easy_pos_x >> easy_pos_y;
	in.close();	

	if(contours_s.size() == 0)
 	{
 		*x = easy_pos_x;
		*y = easy_pos_y;

 		vector<float> black_tmp_s;
		black_tmp_s.push_back(0);
		b.push_back(black_tmp_s); 
 	}else{
		*x = easy_pos_x;
		*y = easy_pos_y;

		for (int i = 0; i < contours_s.size(); i++)
		{
			vector<float> black_tmp_s;
			for (int j = 0; j < contours_s[i].size(); j++)
			{
				black_tmp_s.push_back(contours_s[i][j].x);
				black_tmp_s.push_back(contours_s[i][j].y);
			}
			b.push_back(black_tmp_s);
		}
 	}

 	if(red_contours_s.size() == 0)
 	{
 		vector<float> red_tmp_s;
 		red_tmp_s.push_back(0);
 		b.push_back(red_tmp_s);
 	}
 	else
 	{
	 	for(int i = 0; i < red_contours_s.size(); i++)
		{
			vector<float> red_tmp_s;
			for(int j = 0; j < red_contours_s[i].size(); j++)
			{
				red_tmp_s.push_back(red_contours_s[i][j].x);
				red_tmp_s.push_back(red_contours_s[i][j].y);
			}
			b.push_back(red_tmp_s);
		}
 	}
}

void smoother(vector<Point> &src, vector<Point> &dst)
{
	int cnt = src.size();
	dst[0] = src[0];
	for (int i = 1; i < cnt-2; i++)
	{
		Point tmp = (src[i] + src[i+1] + src[i+2]) / 3;
		dst[i] = tmp;
	}
	dst[cnt - 2] = src[cnt - 2];
	dst[cnt - 1] = src[cnt - 1];
}

void cvThin(const Mat& src, Mat& dst, int intera)//缁嗗寲澶勭悊
{
	cout << "enter cvThin()" << endl;
	if (src.type() != CV_8UC1)
	{
		printf("鍙兘澶勭悊浜屽€兼垨鐏板害鍥惧儚\n");
		return;
	}
	//闈炲師鍦版搷浣滄椂鍊欙紝copy src鍒癲st
	if (dst.data != src.data)
	{
		src.copyTo(dst);
	}

	int i, j, n;
	int width, height;
	width = src.cols - 1;
	height = src.rows - 1;
	int step = src.step;
	int  p2, p3, p4, p5, p6, p7, p8, p9;
	uchar* img;
	bool ifEnd;
	int A1;
	Mat tmpimg;
	//n琛ㄧず杩唬娆℃暟
	for (n = 0; n<intera; n++)
	{
		dst.copyTo(tmpimg);
		ifEnd = false;
		img = tmpimg.data;
		for (i = 1; i < height; i++)
		{
			img += step;
			for (j = 1; j<width; j++)
			{
				uchar* p = img + j;
				A1 = 0;
				if (p[0] > 0)
				{
					if (p[-step] == 0 && p[-step + 1]>0) //p2,p3 01妯″紡
					{
						A1++;
					}
					if (p[-step + 1] == 0 && p[1]>0) //p3,p4 01妯″紡
					{
						A1++;
					}
					if (p[1] == 0 && p[step + 1]>0) //p4,p5 01妯″紡
					{
						A1++;
					}
					if (p[step + 1] == 0 && p[step]>0) //p5,p6 01妯″紡
					{
						A1++;
					}
					if (p[step] == 0 && p[step - 1]>0) //p6,p7 01妯″紡
					{
						A1++;
					}
					if (p[step - 1] == 0 && p[-1]>0) //p7,p8 01妯″紡
					{
						A1++;
					}
					if (p[-1] == 0 && p[-step - 1]>0) //p8,p9 01妯″紡
					{
						A1++;
					}
					if (p[-step - 1] == 0 && p[-step]>0) //p9,p2 01妯″紡
					{
						A1++;
					}
					p2 = p[-step]>0 ? 1 : 0;
					p3 = p[-step + 1]>0 ? 1 : 0;
					p4 = p[1]>0 ? 1 : 0;
					p5 = p[step + 1]>0 ? 1 : 0;
					p6 = p[step]>0 ? 1 : 0;
					p7 = p[step - 1]>0 ? 1 : 0;
					p8 = p[-1]>0 ? 1 : 0;
					p9 = p[-step - 1]>0 ? 1 : 0;
					if ((p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9)>1 && (p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9)<7 && A1 == 1)
					{
						if ((p2 == 0 || p4 == 0 || p6 == 0) && (p4 == 0 || p6 == 0 || p8 == 0)) //p2*p4*p6=0 && p4*p6*p8==0
						{
							dst.at<uchar>(i, j) = 0; //婊¤冻鍒犻櫎鏉′欢锛岃缃綋鍓嶅儚绱犱负0
							ifEnd = true;
						}
					}
				}
			}
		}
		dst.copyTo(tmpimg);
		img = tmpimg.data;
		for (i = 1; i < height; i++)
		{
			img += step;
			for (j = 1; j<width; j++)
			{
				A1 = 0;
				uchar* p = img + j;
				if (p[0] > 0)
				{
					if (p[-step] == 0 && p[-step + 1]>0) //p2,p3 01妯″紡
					{
						A1++;
					}
					if (p[-step + 1] == 0 && p[1]>0) //p3,p4 01妯″紡
					{
						A1++;
					}
					if (p[1] == 0 && p[step + 1]>0) //p4,p5 01妯″紡
					{
						A1++;
					}
					if (p[step + 1] == 0 && p[step]>0) //p5,p6 01妯″紡
					{
						A1++;
					}
					if (p[step] == 0 && p[step - 1]>0) //p6,p7 01妯″紡
					{
						A1++;
					}
					if (p[step - 1] == 0 && p[-1]>0) //p7,p8 01妯″紡
					{
						A1++;
					}
					if (p[-1] == 0 && p[-step - 1]>0) //p8,p9 01妯″紡
					{
						A1++;
					}
					if (p[-step - 1] == 0 && p[-step]>0) //p9,p2 01妯″紡
					{
						A1++;
					}
					p2 = p[-step]>0 ? 1 : 0;
					p3 = p[-step + 1]>0 ? 1 : 0;
					p4 = p[1]>0 ? 1 : 0;
					p5 = p[step + 1]>0 ? 1 : 0;
					p6 = p[step]>0 ? 1 : 0;
					p7 = p[step - 1]>0 ? 1 : 0;
					p8 = p[-1]>0 ? 1 : 0;
					p9 = p[-step - 1]>0 ? 1 : 0;
					if ((p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9)>1 && (p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9)<7 && A1 == 1)
					{
						if ((p2 == 0 || p4 == 0 || p8 == 0) && (p2 == 0 || p6 == 0 || p8 == 0)) //p2*p4*p8=0 && p2*p6*p8==0
						{
							dst.at<uchar>(i, j) = 0; //婊¤冻鍒犻櫎鏉′欢锛岃缃綋鍓嶅儚绱犱负0
							ifEnd = true;
						}
					}
				}
			}
		}
		//濡傛灉涓や釜瀛愯凯浠ｅ凡缁忔病鏈夊彲浠ョ粏鍖栫殑鍍忕礌浜嗭紝鍒欓€€鍑鸿凯浠?
		if (!ifEnd) break;
	}
}

void cvDilate(const Mat& src, Mat& dst, int ksize)
{
	Mat element = getStructuringElement(MORPH_ELLIPSE,
		Size(2 * ksize + 1, 2 * ksize + 1),
		Point(ksize, ksize));
	dilate(src, dst, element);
}

void cutRedline(const Mat& src, vector<vector<Point> > &contours)
{
	ColorDetector cdetect;
	Mat dstImage = cdetect.redSelect(src);
	medianBlur(dstImage, dstImage, 3);	
	cvDilate(dstImage, dstImage, 3);	
	cvThin(dstImage, dstImage, 5);

	vector<vector<Point> > contours_red;
	vector<Vec4i> hierarchy;
	findContours(dstImage, contours_red, hierarchy, RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE);

	for (int i = 0; i < contours_red.size(); ++i)
	{
		if (contours_red[i].size() > 20)//灏嗘瘮杈冨皬鐨勮疆寤撳墧闄ゆ帀  
		{
			//澧炲姞鍏夋粦婊ゆ尝鍣?
			smoother(contours_red[i], contours_red[i]);
			contours.push_back(contours_red[i]);
		}
	}
	cout << "contours_red.size(): " << contours.size() << endl;
}

void cutBlackline(const Mat& src, Mat& mask, vector<vector<Point> > &contours)
{
	ColorDetector cdetect;
	Mat dstImage = cdetect.blackSelect(src);
	cvDilate(dstImage, dstImage, 3);
	medianBlur(dstImage, dstImage, 3);
	cvThin(dstImage, dstImage, 5);

	vector<Mat> channels;
	Mat mergeImage;
	for (int i = 0; i < 3; i++)
	{
		channels.push_back(dstImage);
	}
	merge(channels, mergeImage);
	mask = inverseColor(mask);
	cvDilate(mask, mask, 3);
	mask = inverseColor(mask);

	Mat dstBlack = mergeImage.mul(mask) / 255;
	cvtColor(dstBlack, dstBlack, COLOR_BGR2GRAY);

	vector<vector<Point> >contours_black;
	vector<Vec4i>hierarchy_black;
	findContours(dstBlack, contours_black, hierarchy_black, RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE);

	for (int i = 0; i < contours_black.size(); ++i)
	{
		if (contours_black[i].size() > 10)
		{
			smoother(contours_black[i], contours_black[i]);
			contours.push_back(contours_black[i]);
		}
	}
	cout << "contours_black.size(): " << contours.size() << endl;
}

void autoThreshold(const Mat &src, Mat &dst)
{
	int blockSize = 5;
	int constValue = 8;
	const int maxVal = 255;
	int adaptiveMethod = 0;
	int thresholdType = 1;
	//RGB
	Mat srcGray;
	cvtColor(src, srcGray, COLOR_RGB2GRAY);
	//中值滤波
	medianBlur(srcGray, srcGray, 1);
	//自适应阈值
	Mat dstImage;
	adaptiveThreshold(srcGray, dstImage,
		maxVal, adaptiveMethod,
		thresholdType, blockSize,
		constValue);
	dst = dstImage.clone();
}

bool findLogo(const Mat& src, const Mat& mask)
{
	//妯℃澘鍥剧墖杞粨
	Mat templateImg = mask.clone();
	Mat copyImg1 = templateImg.clone();
	cvtColor(templateImg, templateImg, CV_BGR2GRAY);
	threshold(templateImg, templateImg, 100, 255, CV_THRESH_BINARY);//纭繚榛戜腑鎵剧櫧  

	vector<vector<Point> > contours1;
	findContours(templateImg, contours1, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_NONE);//鏈€澶栧眰杞粨
	drawContours(copyImg1, contours1, -1, Scalar(0, 255, 0), 2, 8);

	//娴嬭瘯鍥剧墖杞粨
	Mat srcImage = src.clone();
	Mat halfSrc = srcImage.clone();
	//resize(srcImage, halfSrc, Size(980, 580));

	Mat thresholdImage;
	autoThreshold(halfSrc, thresholdImage);
	Mat medianImage;
	medianBlur(thresholdImage, medianImage, 1);

	vector<vector<Point> > contours2;
	vector<Vec4i> hierarchy;
	findContours(medianImage, contours2, hierarchy, RETR_TREE, CV_CHAIN_APPROX_SIMPLE);
	
	//Mat dstImage = halfSrc.clone();
	//Scalar color = Scalar(0, 0, 255);
	vector<vector<Point> > result_contours;

	for (int i = 1; i < contours2.size(); /*i++*/)  
	{  
		double a0 = matchShapes(contours1[0], contours2[i], CV_CONTOURS_MATCH_I1, 0);  
		if ((a0<0.05) && (contours2[i].size() > 10))
		{
			//drawContours(dstImage, contours2, i, color, 1, 8);
			result_contours.push_back(contours2[i]);
		}
		i += 2;
	}

	if(result_contours.size() == 0)
	{
		return false;
	}else{
		return true;
	}
}